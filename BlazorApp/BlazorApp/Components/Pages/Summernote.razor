@page "/test3"

@using Microsoft.AspNetCore.Components
@using Microsoft.JSInterop

@attribute [StreamRendering]
@rendermode InteractiveServer

@implements IAsyncDisposable

<div id="@ContainerId" class="summernote-container @CssClass">
    <textarea id="@EditorId" class="summernote-editor">@Value</textarea>
</div>

@code {
    [Parameter] public string Value { get; set; } = string.Empty;
    [Parameter] public EventCallback<string> ValueChanged { get; set; }
    [Parameter] public string Height { get; set; } = "200";
    [Parameter] public string Placeholder { get; set; } = "Escribe aquí...";
    [Parameter] public bool Focus { get; set; } = false;
    [Parameter] public string Toolbar { get; set; } = "basic";
    [Parameter] public string CssClass { get; set; } = string.Empty;

    [Inject] private IJSRuntime JSRuntime { get; set; } = default!;

    private string ContainerId = Guid.NewGuid().ToString("N")[..8];
    private string EditorId = Guid.NewGuid().ToString("N")[..8];
    private IJSObjectReference? jsModule;
    private bool isInitialized = false;


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            jsModule = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./summernote/main.js?50");

            var options = new
            {
                height = Height,
                placeholder = Placeholder,
                focus = Focus,
                toolbar = GetToolbarConfig(Toolbar),
                callbacks = new
                {
                    onChange = "summernoteBlazor.handleChange"
                }

            };

            await jsModule.InvokeVoidAsync("initializeSummernote", EditorId, ContainerId, options, DotNetObjectReference.Create(this));
            isInitialized = true;

            // Set initial value after initialization
            if (!string.IsNullOrEmpty(Value))
            {
                await SetValueAsync(Value);
            }
        }
    }

    [JSInvokable]
    public async Task OnContentChanged(string content)
    {
        Value = content;
        await ValueChanged.InvokeAsync(content);
    }

    public async Task SetValueAsync(string value)
    {
        if (isInitialized && jsModule != null)
        {
            Value = value;
            await jsModule.InvokeVoidAsync("setContent", EditorId, value);
        }
    }

    public async Task<string> GetValueAsync()
    {
        if (isInitialized && jsModule != null)
        {
            return await jsModule.InvokeAsync<string>("getContent", EditorId);
        }
        return Value;
    }

    public async Task ClearAsync()
    {
        if (isInitialized && jsModule != null)
        {
            await jsModule.InvokeVoidAsync("clear", EditorId);
            Value = string.Empty;
            await ValueChanged.InvokeAsync(string.Empty);
        }
    }

    private object GetToolbarConfig(string toolbarType)
    {
        return toolbarType.ToLower() switch
        {
            "default" => new object[] {
                new object[] { "style", new string[] { "style" } },
                new object[] { "font", new string[] { "bold", "underline", "clear" } },
                new object[] { "para", new string[] { "ul", "ol", "paragraph" } },
                new object[] { "insert", new string[] { "link", "picture", "video" } },
                new object[] { "view", new string[] { "fullscreen", "codeview", "help" } }
            },
            "basic" => new object[] {
                new object[] { "style", new string[] { "style" } },
                new object[] { "font", new string[] { "bold",  "italic", "underline", "clear" } },
                new object[] { "para", new string[] { "ul", "ol", "paragraph" } },
                new object[] { "view", new string[] { "fullscreen", "codeview", "help" } }
            },
            // Add other toolbar configurations as needed
            _ => new object[] {
                new object[] { "style", new string[] { "style" } },
                new object[] { "font", new string[] { "bold", "underline", "clear" } },
                new object[] { "para", new string[] { "ul", "ol", "paragraph" } },
                new object[] { "insert", new string[] { "link" , "picture", "video" } },
                new object[] { "view", new string[] { "fullscreen", "codeview", "help" } }
            },
        };
    }

    public async ValueTask DisposeAsync()
    {
        if (jsModule != null)
        {
            try
            {
                await jsModule.InvokeVoidAsync("destroySummernote", EditorId);
                await jsModule.DisposeAsync();
            }
            catch (JSDisconnectedException)
            {
                // Ignore disconnection errors
            }
        }
    }
}