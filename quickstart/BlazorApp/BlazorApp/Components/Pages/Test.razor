@page "/testquill"
@using BlazorApp.Components.Pages.Components
@using Microsoft.AspNetCore.Components
@using Microsoft.JSInterop

@attribute [StreamRendering]
@rendermode InteractiveServer

<h3>Test Quill Editor</h3>

<div class="row">
    <div class="col-md-6">
        <div class="form-group mb-3">
            <label>Contenido para establecer:</label>
            <InputTextArea @bind-Value="Contenido" class="form-control" rows="3"></InputTextArea>
        </div>
        
        <div class="form-group mb-3">
            <button @onclick="btnSetQuill" class="btn btn-primary me-2">Set HTML</button>
            <button @onclick="btnGetQuill" class="btn btn-success me-2">Get HTML</button>
            <button @onclick="btnGetText" class="btn btn-info me-2">Get Texto</button>
            <button @onclick="btnClear" class="btn btn-warning me-2">Clear</button>
            <button @onclick="btnToggleReadOnly" class="btn btn-secondary">
                @(isReadOnly ? "Enable" : "Disable")
            </button>
        </div>

        <div class="form-group mb-3">
            <label>Altura del editor:</label>
            <select @bind="selectedHeight" @bind:after="OnHeightChanged" class="form-select">
                <option value="200px">200px</option>
                <option value="300px">300px</option>
                <option value="400px">400px</option>
                <option value="500px">500px</option>
            </select>
        </div>

        <div class="form-group mb-3">
            <label>Tema:</label>
            <select @bind="selectedTheme" class="form-select">
                <option value="snow">Snow</option>
                <option value="bubble">Bubble</option>
            </select>
        </div>
    </div>
    
    <div class="col-md-6">
        <h5>Vista previa del contenido HTML:</h5>
        <div class="border p-3 mb-3" style="min-height: 100px; background-color: #f8f9fa;">
            @((MarkupString)Contenido)
        </div>
        
        <h5>Texto plano:</h5>
        <div class="border p-3" style="min-height: 50px; background-color: #e9ecef;">
            @TextoPlano
        </div>
    </div>
</div>

<div class="row mt-4">
    <div class="col-12">
        <QuillComponent @ref="quillEditor" 
                       Value="@initialContent" 
                       ValueChanged="OnValueChanged"
                       Height="@selectedHeight"
                       Theme="@selectedTheme"
                       Placeholder="Escribe tu contenido aquí..."
                       ReadOnly="@isReadOnly" />
    </div>
</div>

@code {
    QuillComponent quillEditor = default!;
    string Contenido = "<p>Contenido <strong>inicial</strong> de prueba</p><p>Segunda línea con <em>cursiva</em></p>";
    string TextoPlano = "";
    string selectedHeight = "300px";
    string selectedTheme = "snow";
    bool isReadOnly = false;
    
    string initialContent = "<p>Hello World!</p><p>Some initial <strong>bold</strong> text</p><p><br /></p>";

    async Task btnSetQuill()
    {
        if (quillEditor != null)
        {
            await quillEditor.SetValueAsync(Contenido);
        }
    }

    async Task btnGetQuill()
    {
        if (quillEditor != null)
        {
            Contenido = await quillEditor.GetValueAsync();
            StateHasChanged();
        }
    }

    async Task btnGetText()
    {
        if (quillEditor != null)
        {
            TextoPlano = await quillEditor.GetTextAsync();
            StateHasChanged();
        }
    }

    async Task btnClear()
    {
        if (quillEditor != null)
        {
            await quillEditor.ClearAsync();
            Contenido = "";
            TextoPlano = "";
            StateHasChanged();
        }
    }

    async Task btnToggleReadOnly()
    {
        isReadOnly = !isReadOnly;
        if (quillEditor != null)
        {
            await quillEditor.SetReadOnlyAsync(isReadOnly);
        }
        StateHasChanged();
    }

    async Task OnHeightChanged()//ChangeEventArgs e)
    {
        //selectedHeight = e.Value?.ToString() ?? "300px";
        StateHasChanged();
    }

    async Task OnValueChanged(string value)
    {
        Contenido = value;
        // Opcionalmente también obtener el texto plano
        if (quillEditor != null)
        {
            TextoPlano = await quillEditor.GetTextAsync();
        }
        StateHasChanged();
    }
}